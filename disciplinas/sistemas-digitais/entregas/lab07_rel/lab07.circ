<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="3.7.2" version="1.0">
  This file is intended to be loaded by Logisim-evolution v3.7.2(https://github.com/logisim-evolution/).

  <lib desc="#Wiring" name="0">
    <tool name="Pin">
      <a name="appearance" val="classic"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2"/>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4"/>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7"/>
  <lib desc="#Base" name="8">
    <tool name="Text Tool">
      <a name="font" val="SansSerif bold 12"/>
    </tool>
  </lib>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11"/>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Menu Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool">
      <a name="font" val="SansSerif bold 12"/>
    </tool>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop"/>
    <tool lib="4" name="Register"/>
  </toolbar>
  <circuit name="main">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="main"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="simulationFrequency" val="8.0"/>
    <comp lib="0" loc="(160,110)" name="Splitter">
      <a name="bit1" val="0"/>
      <a name="bit2" val="0"/>
      <a name="bit3" val="0"/>
      <a name="bit4" val="1"/>
      <a name="bit5" val="1"/>
      <a name="bit6" val="1"/>
      <a name="bit7" val="1"/>
      <a name="incoming" val="8"/>
    </comp>
    <comp lib="0" loc="(290,110)" name="Splitter">
      <a name="bit1" val="0"/>
      <a name="bit2" val="0"/>
      <a name="bit3" val="0"/>
      <a name="bit4" val="1"/>
      <a name="bit5" val="1"/>
      <a name="bit6" val="1"/>
      <a name="bit7" val="1"/>
      <a name="incoming" val="8"/>
    </comp>
    <comp lib="0" loc="(30,300)" name="Pin">
      <a name="appearance" val="classic"/>
    </comp>
    <comp lib="0" loc="(70,300)" name="Clock"/>
    <comp lib="1" loc="(80,350)" name="AND Gate">
      <a name="size" val="30"/>
    </comp>
    <comp lib="5" loc="(190,70)" name="Hex Digit Display">
      <a name="offcolor" val="#ff0000"/>
    </comp>
    <comp lib="5" loc="(230,70)" name="Hex Digit Display">
      <a name="offcolor" val="#ff0000"/>
    </comp>
    <comp lib="5" loc="(320,70)" name="Hex Digit Display">
      <a name="offcolor" val="#ff0000"/>
    </comp>
    <comp lib="5" loc="(360,70)" name="Hex Digit Display">
      <a name="offcolor" val="#ff0000"/>
    </comp>
    <comp lib="5" loc="(460,40)" name="LedBar">
      <a name="inputtype" val="row"/>
      <a name="offcolor" val="#ff0000"/>
    </comp>
    <comp lib="5" loc="(580,70)" name="Hex Digit Display">
      <a name="offcolor" val="#ff0000"/>
    </comp>
    <comp lib="8" loc="(20,282)" name="Text">
      <a name="font" val="SansSerif bold 12"/>
      <a name="text" val="PB0"/>
    </comp>
    <comp lib="8" loc="(63,282)" name="Text">
      <a name="font" val="SansSerif bold 12"/>
      <a name="text" val="CLK_DIV"/>
    </comp>
    <comp loc="(150,170)" name="counter_256">
      <a name="appearance" val="evolution"/>
    </comp>
    <comp loc="(250,300)" name="clock_controller">
      <a name="appearance" val="evolution"/>
    </comp>
    <comp loc="(280,170)" name="ROM_256_8">
      <a name="appearance" val="evolution"/>
    </comp>
    <comp loc="(440,170)" name="piso">
      <a name="appearance" val="evolution"/>
    </comp>
    <comp loc="(600,180)" name="sequence_detector">
      <a name="appearance" val="evolution"/>
    </comp>
    <wire from="(100,300)" to="(100,310)"/>
    <wire from="(100,310)" to="(100,350)"/>
    <wire from="(150,170)" to="(160,170)"/>
    <wire from="(160,110)" to="(160,170)"/>
    <wire from="(160,170)" to="(180,170)"/>
    <wire from="(170,180)" to="(170,210)"/>
    <wire from="(170,180)" to="(180,180)"/>
    <wire from="(170,210)" to="(270,210)"/>
    <wire from="(180,100)" to="(190,100)"/>
    <wire from="(180,90)" to="(230,90)"/>
    <wire from="(190,70)" to="(190,100)"/>
    <wire from="(230,70)" to="(230,90)"/>
    <wire from="(250,300)" to="(260,300)"/>
    <wire from="(250,310)" to="(460,310)"/>
    <wire from="(250,320)" to="(270,320)"/>
    <wire from="(250,330)" to="(300,330)"/>
    <wire from="(250,340)" to="(290,340)"/>
    <wire from="(260,220)" to="(260,300)"/>
    <wire from="(270,210)" to="(270,320)"/>
    <wire from="(280,170)" to="(290,170)"/>
    <wire from="(290,110)" to="(290,170)"/>
    <wire from="(290,170)" to="(310,170)"/>
    <wire from="(290,190)" to="(290,230)"/>
    <wire from="(290,190)" to="(310,190)"/>
    <wire from="(290,230)" to="(290,340)"/>
    <wire from="(290,230)" to="(450,230)"/>
    <wire from="(30,300)" to="(40,300)"/>
    <wire from="(300,180)" to="(300,330)"/>
    <wire from="(300,180)" to="(310,180)"/>
    <wire from="(310,100)" to="(320,100)"/>
    <wire from="(310,90)" to="(360,90)"/>
    <wire from="(320,70)" to="(320,100)"/>
    <wire from="(360,70)" to="(360,90)"/>
    <wire from="(40,170)" to="(40,220)"/>
    <wire from="(40,170)" to="(50,170)"/>
    <wire from="(40,220)" to="(260,220)"/>
    <wire from="(40,300)" to="(40,340)"/>
    <wire from="(40,340)" to="(50,340)"/>
    <wire from="(40,360)" to="(40,380)"/>
    <wire from="(40,360)" to="(50,360)"/>
    <wire from="(40,380)" to="(610,380)"/>
    <wire from="(440,170)" to="(450,170)"/>
    <wire from="(440,180)" to="(470,180)"/>
    <wire from="(450,190)" to="(450,230)"/>
    <wire from="(450,190)" to="(470,190)"/>
    <wire from="(450,40)" to="(450,170)"/>
    <wire from="(450,40)" to="(460,40)"/>
    <wire from="(460,200)" to="(460,310)"/>
    <wire from="(460,200)" to="(470,200)"/>
    <wire from="(580,70)" to="(580,80)"/>
    <wire from="(580,80)" to="(610,80)"/>
    <wire from="(600,180)" to="(610,180)"/>
    <wire from="(600,190)" to="(610,190)"/>
    <wire from="(610,190)" to="(610,380)"/>
    <wire from="(610,80)" to="(610,180)"/>
    <wire from="(70,300)" to="(100,300)"/>
    <wire from="(80,350)" to="(90,350)"/>
    <wire from="(90,310)" to="(100,310)"/>
    <wire from="(90,310)" to="(90,350)"/>
  </circuit>
  <vhdl name="piso">library ieee;
use ieee.std_logic_1164.all;

entity piso is
port(
	parallel_in: in std_logic_vector(7 downto 0);
	parallel_out: out std_logic_vector(7 downto 0);
	load_not, clock: in std_logic;
	serial_out: out std_logic
);
end;

architecture behav of piso is
	signal combined_clock: std_logic;
	signal data: std_logic_vector(7 downto 0);
begin
	combined_clock &lt;= load_not and clock;
	parallel_out &lt;= data;

	process (combined_clock) is
		variable next_data: std_logic_vector(7 downto 0);
	begin
		serial_out &lt;= data(7);
		if (falling_edge(combined_clock)) then
			if (load_not = '0') then
				data &lt;= parallel_in;
			else
				data &lt;= data(6 downto 0) &amp; '0';
			end if;
		end if;
	end process;
end;</vhdl>
  <vhdl name="sequence_detector">library ieee;
use ieee.std_logic_1164.all;

entity sequence_detector is
port(
	serial_in, clock, reset_not: in std_logic;
	state_out: out std_logic_vector(3 downto 0);
	is_detected: out std_logic
);
end;

architecture state_machine of sequence_detector is
	type state is (s0, s1, s2, s3, s4, s5, s6, s7);
	signal st: state := s0;
	signal combined_clock: std_logic := '1';
begin
	state_out &lt;= "0000" when st = s0 else
					 "0001" when st = s1 else
					 "0010" when st = s2 else
					 "0011" when st = s3 else
					 "0100" when st = s4 else
					 "0101" when st = s5 else
					 "0110" when st = s6 else
					 "0111" when st = s7 else
					 "0000";

	is_detected &lt;= '1' when st = s7 else '0';
	combined_clock &lt;= clock and reset_not;
	process (combined_clock)
	begin
		if (falling_edge(combined_clock)) then
			if (reset_not = '0') then
				st &lt;= s0;
			elsif (serial_in = '1') then
				case st is
					when s0 =&gt; st &lt;= s1;
					when s1 =&gt; st &lt;= s2;
					when s2 =&gt; st &lt;= s3;
					when s3 =&gt; st &lt;= s3;
					when s4 =&gt; st &lt;= s5;
					when s5 =&gt; st &lt;= s2;
					when s6 =&gt; st &lt;= s1;
					when s7 =&gt; st &lt;= s1;
					when others =&gt; st &lt;= s0;
				end case;
			else
				case st is
					when s0 =&gt; st &lt;= s0;
					when s1 =&gt; st &lt;= s0;
					when s2 =&gt; st &lt;= s0;
					when s3 =&gt; st &lt;= s4;
					when s4 =&gt; st &lt;= s0;
					when s5 =&gt; st &lt;= s6;
					when s6 =&gt; st &lt;= s7;
					when s7 =&gt; st &lt;= s0;
					when others =&gt; st &lt;= s0;
				end case;
			end if;
		end if;
	end process;
end;
</vhdl>
  <vhdl name="ROM_256_8">-- megafunction wizard: %ROM: 1-PORT%
-- GENERATION: STANDARD
-- VERSION: WM1.0
-- MODULE: altsyncram 

-- ============================================================
-- File Name: ROM_256_8.vhd
-- Megafunction Name(s):
-- 			altsyncram
--
-- Simulation Library Files(s):
-- 			altera_mf
-- ============================================================
-- ************************************************************
-- THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
--
-- 18.1.0 Build 625 09/12/2018 SJ Lite Edition
-- ************************************************************


--Copyright (C) 2018  Intel Corporation. All rights reserved.
--Your use of Intel Corporation's design tools, logic functions 
--and other software and tools, and its AMPP partner logic 
--functions, and any output files from any of the foregoing 
--(including device programming or simulation files), and any 
--associated documentation or information are expressly subject 
--to the terms and conditions of the Intel Program License 
--Subscription Agreement, the Intel Quartus Prime License Agreement,
--the Intel FPGA IP License Agreement, or other applicable license
--agreement, including, without limitation, that your use is for
--the sole purpose of programming logic devices manufactured by
--Intel and sold by Intel or its authorized distributors.  Please
--refer to the applicable agreement for further details.


LIBRARY ieee;
USE ieee.std_logic_1164.all;

LIBRARY altera_mf;
USE altera_mf.altera_mf_components.all;

ENTITY ROM_256_8 IS
	PORT
	(
		address		: IN STD_LOGIC_VECTOR (7 DOWNTO 0);
		clock		: IN STD_LOGIC;
		q		: OUT STD_LOGIC_VECTOR (7 DOWNTO 0)
	);
END ROM_256_8;


ARCHITECTURE SYN OF rom_256_8 IS

	SIGNAL sub_wire0	: STD_LOGIC_VECTOR (7 DOWNTO 0);

BEGIN
	q    &lt;= sub_wire0(7 DOWNTO 0);

	altsyncram_component : altsyncram
	GENERIC MAP (
		address_aclr_a =&gt; "NONE",
		clock_enable_input_a =&gt; "BYPASS",
		clock_enable_output_a =&gt; "BYPASS",
		init_file =&gt; "ROM_256_8.hex",
		intended_device_family =&gt; "MAX 10",
		lpm_hint =&gt; "ENABLE_RUNTIME_MOD=NO",
		lpm_type =&gt; "altsyncram",
		numwords_a =&gt; 256,
		operation_mode =&gt; "ROM",
		outdata_aclr_a =&gt; "NONE",
		outdata_reg_a =&gt; "UNREGISTERED",
		widthad_a =&gt; 8,
		width_a =&gt; 8,
		width_byteena_a =&gt; 1
	)
	PORT MAP (
		address_a =&gt; address,
		clock0 =&gt; clock,
		q_a =&gt; sub_wire0
	);



END SYN;

-- ============================================================
-- CNX file retrieval info
-- ============================================================
-- Retrieval info: PRIVATE: ADDRESSSTALL_A NUMERIC "0"
-- Retrieval info: PRIVATE: AclrAddr NUMERIC "0"
-- Retrieval info: PRIVATE: AclrByte NUMERIC "0"
-- Retrieval info: PRIVATE: AclrOutput NUMERIC "0"
-- Retrieval info: PRIVATE: BYTE_ENABLE NUMERIC "0"
-- Retrieval info: PRIVATE: BYTE_SIZE NUMERIC "8"
-- Retrieval info: PRIVATE: BlankMemory NUMERIC "0"
-- Retrieval info: PRIVATE: CLOCK_ENABLE_INPUT_A NUMERIC "0"
-- Retrieval info: PRIVATE: CLOCK_ENABLE_OUTPUT_A NUMERIC "0"
-- Retrieval info: PRIVATE: Clken NUMERIC "0"
-- Retrieval info: PRIVATE: IMPLEMENT_IN_LES NUMERIC "0"
-- Retrieval info: PRIVATE: INIT_FILE_LAYOUT STRING "PORT_A"
-- Retrieval info: PRIVATE: INIT_TO_SIM_X NUMERIC "0"
-- Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "MAX 10"
-- Retrieval info: PRIVATE: JTAG_ENABLED NUMERIC "0"
-- Retrieval info: PRIVATE: JTAG_ID STRING "NONE"
-- Retrieval info: PRIVATE: MAXIMUM_DEPTH NUMERIC "0"
-- Retrieval info: PRIVATE: MIFfilename STRING "ROM_256_8.hex"
-- Retrieval info: PRIVATE: NUMWORDS_A NUMERIC "256"
-- Retrieval info: PRIVATE: RAM_BLOCK_TYPE NUMERIC "0"
-- Retrieval info: PRIVATE: RegAddr NUMERIC "1"
-- Retrieval info: PRIVATE: RegOutput NUMERIC "0"
-- Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING "0"
-- Retrieval info: PRIVATE: SingleClock NUMERIC "1"
-- Retrieval info: PRIVATE: UseDQRAM NUMERIC "0"
-- Retrieval info: PRIVATE: WidthAddr NUMERIC "8"
-- Retrieval info: PRIVATE: WidthData NUMERIC "8"
-- Retrieval info: PRIVATE: rden NUMERIC "0"
-- Retrieval info: LIBRARY: altera_mf altera_mf.altera_mf_components.all
-- Retrieval info: CONSTANT: ADDRESS_ACLR_A STRING "NONE"
-- Retrieval info: CONSTANT: CLOCK_ENABLE_INPUT_A STRING "BYPASS"
-- Retrieval info: CONSTANT: CLOCK_ENABLE_OUTPUT_A STRING "BYPASS"
-- Retrieval info: CONSTANT: INIT_FILE STRING "ROM_256_8.hex"
-- Retrieval info: CONSTANT: INTENDED_DEVICE_FAMILY STRING "MAX 10"
-- Retrieval info: CONSTANT: LPM_HINT STRING "ENABLE_RUNTIME_MOD=NO"
-- Retrieval info: CONSTANT: LPM_TYPE STRING "altsyncram"
-- Retrieval info: CONSTANT: NUMWORDS_A NUMERIC "256"
-- Retrieval info: CONSTANT: OPERATION_MODE STRING "ROM"
-- Retrieval info: CONSTANT: OUTDATA_ACLR_A STRING "NONE"
-- Retrieval info: CONSTANT: OUTDATA_REG_A STRING "UNREGISTERED"
-- Retrieval info: CONSTANT: WIDTHAD_A NUMERIC "8"
-- Retrieval info: CONSTANT: WIDTH_A NUMERIC "8"
-- Retrieval info: CONSTANT: WIDTH_BYTEENA_A NUMERIC "1"
-- Retrieval info: USED_PORT: address 0 0 8 0 INPUT NODEFVAL "address[7..0]"
-- Retrieval info: USED_PORT: clock 0 0 0 0 INPUT VCC "clock"
-- Retrieval info: USED_PORT: q 0 0 8 0 OUTPUT NODEFVAL "q[7..0]"
-- Retrieval info: CONNECT: @address_a 0 0 8 0 address 0 0 8 0
-- Retrieval info: CONNECT: @clock0 0 0 0 0 clock 0 0 0 0
-- Retrieval info: CONNECT: q 0 0 8 0 @q_a 0 0 8 0
-- Retrieval info: GEN_FILE: TYPE_NORMAL ROM_256_8.vhd TRUE
-- Retrieval info: GEN_FILE: TYPE_NORMAL ROM_256_8.inc FALSE
-- Retrieval info: GEN_FILE: TYPE_NORMAL ROM_256_8.cmp TRUE
-- Retrieval info: GEN_FILE: TYPE_NORMAL ROM_256_8.bsf TRUE
-- Retrieval info: GEN_FILE: TYPE_NORMAL ROM_256_8_inst.vhd TRUE
-- Retrieval info: LIB_FILE: altera_mf
</vhdl>
  <vhdl name="counter_256">LIBRARY ieee;
USE ieee.std_logic_1164.all;
use ieee.numeric_std.all;

ENTITY counter_256 IS
  PORT (
  	clk: in std_logic;
  	q: out std_logic_vector(7 downto 0)
  );
END counter_256;


ARCHITECTURE TypeArchitecture OF counter_256 IS
BEGIN
	counter_mod256: process(clk) is
		variable counter: natural := 0;
	begin 
		if (falling_edge(clk)) then
			if (counter = 255) then 
				counter := 0;
			else 
				counter := counter + 1;
			end if;
			q &lt;= std_logic_vector(to_unsigned(counter, 8));
		end if;
	end process counter_mod256;
END TypeArchitecture;
</vhdl>
  <vhdl name="clock_controller">LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY clock_controller IS
  PORT (
  	clk_geral, enable: in std_logic;
  	clk_counter, reset_sequence, clk_memo, piso_load, clk_serial: out std_logic
  );
END clock_controller;

ARCHITECTURE TypeArchitecture OF clock_controller IS
BEGIN
	process(clk_geral) is
		constant N: integer := 25;
		variable counter: integer := 0;
	begin
		if (falling_edge(clk_geral)) then
			if enable = '0' then
				if counter = N then
					counter := 0;
				else
					counter := counter + 1;
				end if;
			end if;

			if counter = 0 then
				clk_counter &lt;= '1';
				reset_sequence &lt;= '0';
			else
				clk_counter &lt;= '0';
				reset_sequence &lt;= '1';
			end if;

			if counter = 1 then
				clk_memo &lt;= '0';
			else
				clk_memo &lt;= '1';
			end if;
	
			if counter = 5 then
				piso_load &lt;= '0';
			else
				piso_load &lt;= '1';
			end if;

			case counter is
				when 7|9|11|13|15|17|19|21 =&gt; clk_serial &lt;= '0';
				when others =&gt; clk_serial &lt;= '1';
			end case;
		end if;
	end process;
END TypeArchitecture;
</vhdl>
</project>
